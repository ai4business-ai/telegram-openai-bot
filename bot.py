import os
import logging
import asyncio
from typing import Dict, Any

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
active_threads: Dict[int, str] = {}

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
ASSISTANT_ID = os.getenv("OPENAI_ASSISTANT_ID")
if not ASSISTANT_ID:
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω
    assistant = client.beta.assistants.create(
        name="Telegram Bot Assistant",
        instructions="–í—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.",
        model="gpt-4-turbo",  # –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å
    )
    ASSISTANT_ID = assistant.id
    logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å ID: {ASSISTANT_ID}")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å ID: {ASSISTANT_ID}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–æ –º–Ω–æ–π."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    help_text = (
        "–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/chat - –ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n"
        "/end - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
    )
    await update.message.reply_text(help_text)

async def start_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
    user_id = update.effective_user.id
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in active_threads:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
        try:
            client.beta.threads.delete(active_threads[user_id])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    thread = client.beta.threads.create()
    active_threads[user_id] = thread.id
    
    await update.message.reply_text(
        "ü§ñ –Ø –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ."
    )
    
    logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –ø–æ—Ç–æ–∫–æ–º {thread.id}")

async def end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
    user_id = update.effective_user.id
    
    if user_id in active_threads:
        thread_id = active_threads[user_id]
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        try:
            client.beta.threads.delete(thread_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        del active_threads[user_id]
        
        await update.message.reply_text(
            "üëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!"
        )
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if user_id not in active_threads:
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="start_chat")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å?",
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = update.message.text
    thread_id = active_threads[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç"
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_message
        )
        
        # –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID,
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = await poll_run(thread_id, run.id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if response:
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ: {e}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å /chat."
        )

async def poll_run(thread_id: str, run_id: str) -> str:
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    max_attempts = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞
    for _ in range(max_attempts):
        await asyncio.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –æ–ø—Ä–æ—Å–∞–º–∏
        
        run = client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run_id
        )
        
        if run.status == "completed":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–æ—Ç–æ–∫–∞
            messages = client.beta.threads.messages.list(
                thread_id=thread_id
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            for message in messages.data:
                if message.role == "assistant":
                    content = ""
                    for content_part in message.content:
                        if content_part.type == "text":
                            content += content_part.text.value
                    
                    return content
            
            return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
        
        if run.status in ["failed", "cancelled", "expired"]:
            logger.error(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {run.status}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
    
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    return "–û—Ç–≤–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_chat":
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ start_chat
        await query.edit_message_text(text="–ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π —á–∞—Ç...")
        await start_chat(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("chat", start_chat))
    application.add_handler(CommandHandler("end", end_chat))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
