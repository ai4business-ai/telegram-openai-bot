import os
import logging
import asyncio
import textwrap
import json
import sqlite3
import hashlib
import hmac
from typing import Dict, Any, Tuple, Optional
from threading import Thread
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import parse_qs, urlparse
from datetime import datetime
from typing import Dict, Tuple
from signal import signal, SIGINT, SIGTERM

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, InlineQueryHandler
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    WebAppInfo,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
MAX_MESSAGE_LENGTH = 4096

# URL Mini App –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MINI_APP_URL = "https://ai4business-ai.github.io/front-bot-repo/"
MAX_MESSAGE_LENGTH = 4096
DATABASE_NAME = "users.db"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: user_id -> (assistant_id, thread_id, assistant_type)
active_threads: Dict[int, Tuple[str, str, str]] = {}
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANTS = {
    "market": os.getenv("OPENAI_ASSISTANT_ID_MARKET"),
    "founder": os.getenv("OPENAI_ASSISTANT_ID_FOUNDER"),
    "business": os.getenv("OPENAI_ASSISTANT_ID_BUSINESS"),
    "adapter": os.getenv("OPENAI_ASSISTANT_ID_ADAPTER")
}

# –ù–∞–∑–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANT_NAMES = {
    "market": "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
    "founder": "üí° –ò–¥–µ–∏ —Ñ–∞—É–Ω–¥–µ—Ä–∞",
    "business": "üìù –ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å",
    "adapter": "üîÑ –ê–¥–∞–ø—Ç–∞—Ç–æ—Ä –∏–¥–µ–π"
}

# –û–ø–∏—Å–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANT_DESCRIPTIONS = {
    "market": "–ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –Ω–∞–π—Ç–∏ –Ω–∏—à–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è",
    "founder": "–ü–æ–º–æ–≥–∞–µ—Ç –æ–±—Å—É–¥–∏—Ç—å –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏–¥–µ–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –±–∏–∑–Ω–µ—Å–∞",
    "business": "–ü–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å",
    "adapter": "–ü–æ–º–æ–≥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∏–¥–µ–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞"
}
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_threads: Dict[int, Tuple[str, str, str]] = {}
application = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        status TEXT DEFAULT 'user',
        registered_at TIMESTAMP,
        last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()

def add_or_update_user(telegram_id: int, username: str = None, first_name: str = None, last_name: str = None, status: str = 'user'):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT status FROM users WHERE telegram_id = ?', (telegram_id,))
    existing_user = cursor.fetchone()
    
    if existing_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
        UPDATE users 
        SET username = ?, first_name = ?, last_name = ?, last_activity = CURRENT_TIMESTAMP
        WHERE telegram_id = ?
        ''', (username, first_name, last_name, telegram_id))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
        INSERT INTO users (telegram_id, username, first_name, last_name, status)
        VALUES (?, ?, ?, ?, ?)
        ''', (telegram_id, username, first_name, last_name, status))
    
    conn.commit()
    conn.close()

def register_user(telegram_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ 'registered')."""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    UPDATE users 
    SET status = 'registered', registered_at = CURRENT_TIMESTAMP
    WHERE telegram_id = ?
    ''', (telegram_id,))
    
    conn.commit()
    conn.close()
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    with sqlite3.connect(DATABASE_NAME) as conn:
        conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            status TEXT DEFAULT 'user',
            registered_at TIMESTAMP,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        conn.commit()

def add_or_update_user(telegram_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with sqlite3.connect(DATABASE_NAME) as conn:
        conn.execute('''
        INSERT OR REPLACE INTO users 
        (telegram_id, username, first_name, last_name, last_activity)
        VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (telegram_id, username, first_name, last_name))
        conn.commit()

def get_user_status(telegram_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT status FROM users WHERE telegram_id = ?', (telegram_id,))
    result = cursor.fetchone()
    
    conn.close()
    
    return result[0] if result else 'new'
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with sqlite3.connect(DATABASE_NAME) as conn:
        cursor = conn.execute('SELECT status FROM users WHERE telegram_id = ?', (telegram_id,))
        result = cursor.fetchone()
        return result[0] if result else 'new'

def validate_telegram_data(init_data: str, bot_token: str) -> Optional[dict]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç Telegram WebApp."""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parsed_data = {}
        for item in init_data.split('&'):
            key, value = item.split('=', 1)
            parsed_data[key] = value
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º hash
        received_hash = parsed_data.pop('hash', None)
        if not received_hash:
            return None
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(parsed_data.items())])
        
        # –°–æ–∑–¥–∞–µ–º secret key
        secret_key = hmac.new(
            'WebAppData'.encode(),
            bot_token.encode(),
            hashlib.sha256
        ).digest()
        
        # –í—ã—á–∏—Å–ª—è–µ–º hash
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º hash
        if calculated_hash == received_hash:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'user' in parsed_data:
                user_data = json.loads(parsed_data['user'])
                return user_data
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Telegram: {e}")
        return None
def register_user(telegram_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with sqlite3.connect(DATABASE_NAME) as conn:
        conn.execute('''
        UPDATE users 
        SET status = 'registered', registered_at = CURRENT_TIMESTAMP
        WHERE telegram_id = ?
        ''', (telegram_id,))
        conn.commit()

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    keyboard = [
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π Mini App."""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", web_app=WebAppInfo(url=MINI_APP_URL))],
        [KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ")],
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_assistant_selection_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    keyboard = []
    for assistant_type, name in ASSISTANT_NAMES.items():
        keyboard.append([InlineKeyboardButton(name, callback_data=f"select_{assistant_type}")])
    
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_or_update_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    user_status = get_user_status(user.id)
    
    if user_status == 'registered':
        help_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"
            "ü§ñ –Ø –±–æ—Ç —Å –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ –Ω–∞ –±–∞–∑–µ –ò–ò.\n\n"
            "üéÆ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –Ω–∏–∂–µ\n"
            "2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
            "3. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n\n"
            "üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:**\n"
            f"‚Ä¢ {ASSISTANT_NAMES['market']} - {ASSISTANT_DESCRIPTIONS['market']}\n"
            f"‚Ä¢ {ASSISTANT_NAMES['founder']} - {ASSISTANT_DESCRIPTIONS['founder']}\n"
            f"‚Ä¢ {ASSISTANT_NAMES['business']} - {ASSISTANT_DESCRIPTIONS['business']}\n"
            f"‚Ä¢ {ASSISTANT_NAMES['adapter']} - {ASSISTANT_DESCRIPTIONS['adapter']}\n\n"
            "üõë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        )
    else:
        help_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "ü§ñ –Ø –±–æ—Ç —Å –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ –Ω–∞ –±–∞–∑–µ –ò–ò.\n\n"
            "üìã **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –Ω–∏–∂–µ\n"
            "2. –ü—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
            "4. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!\n\n"
            "üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:**\n"
            f"‚Ä¢ {ASSISTANT_NAMES['market']} - {ASSISTANT_DESCRIPTIONS['market']}\n"
            f"‚Ä¢ {ASSISTANT_NAMES['founder']} - {ASSISTANT_DESCRIPTIONS['founder']}\n"
            f"‚Ä¢ {ASSISTANT_NAMES['business']} - {ASSISTANT_DESCRIPTIONS['business']}\n"
            f"‚Ä¢ {ASSISTANT_NAMES['adapter']} - {ASSISTANT_DESCRIPTIONS['adapter']}\n\n"
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        )
    
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())
    ], resize_keyboard=True)

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    user_status = get_user_status(user.id)
    add_or_update_user(user.id, user.username, user.first_name, user.last_name)

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
    SELECT username, first_name, last_name, status, registered_at, created_at 
    FROM users WHERE telegram_id = ?
    ''', (user.id,))
    user_data = cursor.fetchone()
    conn.close()
    
    if user_data:
        username, first_name, last_name, status, registered_at, created_at = user_data
        
        profile_text = f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
        profile_text += f"üÜî **ID:** {user.id}\n"
        
        if first_name:
            profile_text += f"üë§ **–ò–º—è:** {first_name}"
            if last_name:
                profile_text += f" {last_name}"
            profile_text += "\n"
        
        if username:
            profile_text += f"üì± **Username:** @{username}\n"
        
        status_emoji = "‚úÖ" if status == "registered" else "‚ùå"
        status_text = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if status == "registered" else "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        profile_text += f"{status_emoji} **–°—Ç–∞—Ç—É—Å:** {status_text}\n"
        
        if registered_at:
            profile_text += f"üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {registered_at[:19]}\n"
        
        profile_text += f"üìÖ **–ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ:** {created_at[:19]}\n\n"
        
        if status != "registered":
            profile_text += "üí° **–°–æ–≤–µ—Ç:** –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º!"
        
    else:
        profile_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    await update.message.reply_text(profile_text, parse_mode='Markdown', reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    help_text = (
        "üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
        "üéÆ **–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n\n"
        "üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:**\n"
        f"‚Ä¢ {ASSISTANT_NAMES['market']} - {ASSISTANT_DESCRIPTIONS['market']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['founder']} - {ASSISTANT_DESCRIPTIONS['founder']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['business']} - {ASSISTANT_DESCRIPTIONS['business']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['adapter']} - {ASSISTANT_DESCRIPTIONS['adapter']}\n\n"
        "‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –£–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω\n\n"
        "üîò **–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
        "üéÆ –í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞\n"
        "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç!"
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç —Å –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ –Ω–∞ –±–∞–∑–µ –ò–ò.\n\n"
        "üéÆ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:"
    )

    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    user_id = update.effective_user.id
    
    if user_id in active_threads:
        _, _, assistant_type = active_threads[user_id]
        assistant_name = ASSISTANT_NAMES[assistant_type]
        await update.message.reply_text(
            f"ü§ñ **–ê–∫—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:** {assistant_name}\n\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
            "üí¨ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.\n\n"
            "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=get_main_keyboard()
        )
    await update.message.reply_text(text, reply_markup=get_main_keyboard())

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App
        web_app_data = update.message.web_app_data.data
        data = json.loads(web_app_data)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        action = data.get('action')
        data = json.loads(update.message.web_app_data.data)

        if action == 'register_user':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.effective_user.id
            register_user(user_id)
            
        if data.get('action') == 'register_user':
            register_user(update.effective_user.id)
            await update.message.reply_text(
                "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!\n"
                "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è.",
                parse_mode='Markdown',
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=get_main_keyboard()
            )
            
        elif action == 'show_specific_assistant':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            selected_assistant = data.get('selected_assistant')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            user_status = get_user_status(update.effective_user.id)
            if user_status != 'registered':
                await update.message.reply_text(
                    "‚ùå **–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                    parse_mode='Markdown',
                    reply_markup=get_main_keyboard()
                )
                return
            
            if selected_assistant and selected_assistant in ASSISTANTS:
                await start_chat_with_assistant_direct(update, context, selected_assistant)
            else:
                await send_general_assistant_selection_message(update, context)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            await send_general_assistant_selection_message(update, context)
        elif data.get('action') == 'select_assistant':
            await start_assistant(
                update, 
                context, 
                data.get('assistant_type')
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö Web App: {e}")
        await send_general_assistant_selection_message(update, context)

async def start_chat_with_assistant_direct(update: Update, context: ContextTypes.DEFAULT_TYPE, assistant_type: str) -> None:
    """–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é (–¥–ª—è keyboard button)."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_status = get_user_status(user_id)
    if user_status != 'registered':
        logger.error(f"WebApp error: {e}")
        await update.message.reply_text(
            "‚ùå **–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            parse_mode='Markdown',
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_main_keyboard()
        )
        return

async def start_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE, assistant_type: str):
    """–ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    user_id = update.effective_user.id

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in active_threads:
        _, thread_id, _ = active_threads[user_id]
        try:
            _, thread_id, _ = active_threads[user_id]
            client.beta.threads.delete(thread_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
        except Exception:
            pass

    assistant_id = ASSISTANTS.get(assistant_type)
    
    if not assistant_id:
        await update.message.reply_text(
            f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç '{ASSISTANT_NAMES[assistant_type]}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
            "‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            reply_markup=get_main_keyboard()
        )
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    thread = client.beta.threads.create()
    active_threads[user_id] = (assistant_id, thread.id, assistant_type)

    await update.message.reply_text(
        f"‚úÖ *–ó–∞–ø—É—â–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}*\n\n"
        f"üìù {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è —Å–º–µ–Ω—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
        "üõë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        parse_mode='Markdown',
        f"‚úÖ –í—ã–±—Ä–∞–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ASSISTANT_NAMES[assistant_type]}\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º '{ASSISTANT_NAMES[assistant_type]}' (ID: {assistant_id}) –≤ –ø–æ—Ç–æ–∫–µ {thread.id}")

async def handle_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ menu button."""
    query = update.inline_query.query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç Mini App
    if query.startswith("assistant_selected_"):
        assistant_type = query.replace("assistant_selected_", "")
        
        if assistant_type in ASSISTANTS:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–∞
            results = [
                InlineQueryResultArticle(
                    id=f"select_{assistant_type}",
                    title=f"–í—ã–±—Ä–∞—Ç—å {ASSISTANT_NAMES[assistant_type]}",
                    description=ASSISTANT_DESCRIPTIONS[assistant_type],
                    input_message_content=InputTextMessageContent(
                        message_text=f"ü§ñ –í—ã–±—Ä–∞–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: *{ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}*\n\n"
                                   f"üìù {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
                                   "üí¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è:",
                        parse_mode='Markdown'
                    ),
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton(
                            f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å {ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}",
                            callback_data=f"select_{assistant_type}"
                        )
                    ]])
                )
            ]
            
            await update.inline_query.answer(results, cache_time=1)
        else:
            await update.inline_query.answer([])
    else:
        await update.inline_query.answer([])

async def send_specific_assistant_message(update: Update, context: ContextTypes.DEFAULT_TYPE, assistant_type: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    assistant_name = ASSISTANT_NAMES[assistant_type]
    assistant_description = ASSISTANT_DESCRIPTIONS[assistant_type]
    
    emoji_map = {
        'market': 'üìä',
        'founder': 'üí°', 
        'business': 'üìù',
        'adapter': 'üîÑ'
    }
    
    message_text = (
        f"{emoji_map[assistant_type]} **{assistant_name.replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}**\n\n"
        f"üìù {assistant_description}\n\n"
        f"üí¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:"
    )
    
    keyboard = [[InlineKeyboardButton(f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å {assistant_name.replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}", callback_data=f"select_{assistant_type}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def send_general_assistant_selection_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (fallback)."""
    user_status = get_user_status(update.effective_user.id)
    
    if user_status != 'registered':
        message_text = (
            "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        )
        await update.message.reply_text(
            message_text,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    message_text = (
        "ü§ñ **–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è:**\n\n"
        f"üìä **–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞** - {ASSISTANT_DESCRIPTIONS['market']}\n\n"
        f"üí° **–ò–¥–µ–∏ —Ñ–∞—É–Ω–¥–µ—Ä–∞** - {ASSISTANT_DESCRIPTIONS['founder']}\n\n"
        f"üìù **–ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å** - {ASSISTANT_DESCRIPTIONS['business']}\n\n"
        f"üîÑ **–ê–¥–∞–ø—Ç–∞—Ç–æ—Ä –∏–¥–µ–π** - {ASSISTANT_DESCRIPTIONS['adapter']}\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞:"
    )
    
    await update.message.reply_text(
        message_text,
        reply_markup=get_assistant_selection_keyboard(),
        parse_mode='Markdown'
    )

async def start_chat_with_type(update: Update, context: ContextTypes.DEFAULT_TYPE, assistant_type: str) -> None:
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_status = get_user_status(user_id)
    if user_status != 'registered':
        await update.callback_query.edit_message_text(
            "‚ùå **–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            parse_mode='Markdown'
        )
        return
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in active_threads:
        try:
            _, thread_id, _ = active_threads[user_id]
            client.beta.threads.delete(thread_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
    
    assistant_id = ASSISTANTS.get(assistant_type)
    
    if not assistant_id:
        await update.callback_query.edit_message_text(
            f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç '{ASSISTANT_NAMES[assistant_type]}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
            reply_markup=get_assistant_selection_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    thread = client.beta.threads.create()
    active_threads[user_id] = (assistant_id, thread.id, assistant_type)
    
    await update.callback_query.edit_message_text(
        f"‚úÖ *–ó–∞–ø—É—â–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}*\n\n"
        f"üìù {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è —Å–º–µ–Ω—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
        "üõë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        parse_mode='Markdown'
    )
    
    logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º '{ASSISTANT_NAMES[assistant_type]}' (ID: {assistant_id}) –≤ –ø–æ—Ç–æ–∫–µ {thread.id}")

async def stop_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = update.effective_user.id
    text = update.message.text

    if user_id in active_threads:
        _, thread_id, assistant_type = active_threads[user_id]
        
        try:
            client.beta.threads.delete(thread_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
        
        del active_threads[user_id]
        
    if text == "üéÆ –í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞":
        await update.message.reply_text(
            f"üëã –†–∞–∑–≥–æ–≤–æ—Ä —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º *{ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}* –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
            "üéÆ –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\"",
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n\n"
            "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
            "–û—Ç–∫—Ä–æ–π—Ç–µ Mini App –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
            reply_markup=get_main_keyboard()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if message_text == "üéÆ –í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞":
        await send_general_assistant_selection_message(update, context)
        return
    elif message_text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ":
        await stop_chat(update, context)
        return
    elif message_text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await profile_command(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in active_threads:
        user_status = get_user_status(user_id)
        if user_status != 'registered':
            await update.message.reply_text(
                "‚ùå **–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                parse_mode='Markdown',
                reply_markup=get_main_keyboard()
            )
        else:
        
    if text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ":
        if user_id in active_threads:
            del active_threads[user_id]
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.\n\n"
                "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è.",
                "üóëÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
                reply_markup=get_main_keyboard()
            )
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ
    assistant_id, thread_id, assistant_type = active_threads[user_id]
    if user_id not in active_threads:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
            reply_markup=get_main_keyboard()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç"
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    await process_assistant_response(update, context)

async def process_assistant_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."""
    user_id = update.effective_user.id
    assistant_id, thread_id, _ = active_threads[user_id]
    
    await context.bot.send_chat_action(user_id, "typing")

    try:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ thread
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message_text
            content=update.message.text
        )

        # –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ
        # –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=assistant_id,
            assistant_id=assistant_id
        )

        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = await poll_run(thread_id, run.id)
        response = await wait_for_assistant_response(thread_id, run.id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response:
            for message_chunk in split_response(response):
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
                await update.message.reply_text(
                    message_chunk, 
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                response[:MAX_MESSAGE_LENGTH],
                reply_markup=get_main_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ: {e}")
        logger.error(f"Assistant error: {e}")
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_main_keyboard()
        )

def clean_markdown_formatting(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram."""
    import re
    
    text = re.sub(r'\*\*(.*?)\*\*', r'*\1*', text)
    text = re.sub(r'###\s*(.*?)(?=\n|$)', r'*\1*', text)
    text = re.sub(r'##\s*(.*?)(?=\n|$)', r'*\1*', text)
    text = re.sub(r'#\s*(.*?)(?=\n|$)', r'*\1*', text)
    text = re.sub(r'^\s*[\-\*]\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    text = re.sub(r'\*{3,}', '**', text)
    
    return text

def split_response(response: str) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    response = clean_markdown_formatting(response)
    
    if len(response) <= MAX_MESSAGE_LENGTH:
        return [response]
    
    chunks = []
    current_chunk = ""
    
    paragraphs = response.split('\n\n')
    
    for paragraph in paragraphs:
        if len(paragraph) > MAX_MESSAGE_LENGTH:
            sentences = paragraph.replace('. ', '.|').replace('! ', '!|').replace('? ', '?|').split('|')
            for sentence in sentences:
                if len(current_chunk) + len(sentence) + 2 <= MAX_MESSAGE_LENGTH:
                    if current_chunk:
                        current_chunk += " " + sentence
                    else:
                        current_chunk = sentence
                else:
                    if current_chunk:
                        chunks.append(current_chunk)
                    current_chunk = sentence
        else:
            if len(current_chunk) + len(paragraph) + 2 <= MAX_MESSAGE_LENGTH:
                if current_chunk:
                    current_chunk += "\n\n" + paragraph
                else:
                    current_chunk = paragraph
            else:
                if current_chunk:
                    chunks.append(current_chunk)
                current_chunk = paragraph
    
    if current_chunk:
        chunks.append(current_chunk)
    
    return chunks

async def poll_run(thread_id: str, run_id: str) -> str:
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    max_attempts = 60
    for _ in range(max_attempts):
async def wait_for_assistant_response(thread_id: str, run_id: str) -> str:
    """–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    for _ in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫
        await asyncio.sleep(1)

        run = client.beta.threads.runs.retrieve(
@@ -756,163 +257,50 @@ async def poll_run(thread_id: str, run_id: str) -> str:
        )

        if run.status == "completed":
            messages = client.beta.threads.messages.list(
                thread_id=thread_id
            )
            
            for message in messages.data:
                if message.role == "assistant":
                    content = ""
                    for content_part in message.content:
                        if content_part.type == "text":
                            content += content_part.text.value
                    
                    return content
            
            return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
            messages = client.beta.threads.messages.list(thread_id)
            for msg in messages.data:
                if msg.role == "assistant":
                    return msg.content[0].text.value

        if run.status in ["failed", "cancelled", "expired"]:
            logger.error(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {run.status}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        if run.status in ["failed", "cancelled"]:
            return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"

    return "–û—Ç–≤–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    return "‚è≥ –û—Ç–≤–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å"

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("select_"):
        assistant_type = query.data[7:]
        
        if assistant_type in ASSISTANTS:
            await start_chat_with_type(update, context, assistant_type)
def shutdown_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    if application:
        application.stop()
    exit(0)

# HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è API –∏ health check
class APIHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'Bot is running!')
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        if self.path == '/api/register':
            try:
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
                init_data = data.get('initData')
                bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
                
                user_data = validate_telegram_data(init_data, bot_token)
                
                if user_data:
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    register_user(user_data['id'])
                    
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    response = {'success': True, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'}
                    self.wfile.write(json.dumps(response).encode('utf-8'))
                else:
                    self.send_response(400)
                    self.send_header('Content-type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    response = {'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}
                    self.wfile.write(json.dumps(response).encode('utf-8'))
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {'success': False, 'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}
                self.wfile.write(json.dumps(response).encode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    global application

    def log_message(self, format, *args):
        pass

def run_api_server(port):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è API –∏ health check."""
    server = HTTPServer(('0.0.0.0', port), APIHandler)
    logger.info(f"API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_database()

    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    
    missing_assistants = [name for name, aid in ASSISTANTS.items() if not aid]
    if missing_assistants:
        logger.error(f"–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤: {missing_assistants}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_ASSISTANT_ID_*")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not (token := os.getenv("TELEGRAM_BOT_TOKEN")):
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    application.add_handler(InlineQueryHandler(handle_inline_query))
    application.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal(SIGINT, shutdown_handler)
    signal(SIGTERM, shutdown_handler)

    port = os.environ.get("PORT")
    if port:
        api_thread = Thread(target=run_api_server, args=(int(port),), daemon=True)
        api_thread.start()
        logger.info(f"API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        logger.info("–ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ —Å API —Å–µ—Ä–≤–µ—Ä–æ–º")
        try:
            application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            logger.info("–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ drop_pending_updates")
            application.run_polling()
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
        try:
            application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            logger.info("–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ drop_pending_updates")
            application.run_polling()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
