import os
import logging
import asyncio
import textwrap
from typing import Dict, Any, Tuple
from threading import Thread
import time
from http.server import HTTPServer, BaseHTTPRequestHandler

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, InlineQueryHandler
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
MAX_MESSAGE_LENGTH = 4096

# URL Mini App –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
MINI_APP_URL = "https://ai4business-ai.github.io/front-bot-repo/"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: user_id -> (assistant_id, thread_id, assistant_type)
active_threads: Dict[int, Tuple[str, str, str]] = {}

# ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ASSISTANTS = {
    "market": os.getenv("OPENAI_ASSISTANT_ID_MARKET"),
    "founder": os.getenv("OPENAI_ASSISTANT_ID_FOUNDER"),
    "business": os.getenv("OPENAI_ASSISTANT_ID_BUSINESS"),
    "adapter": os.getenv("OPENAI_ASSISTANT_ID_ADAPTER")
}

# –ù–∞–∑–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANT_NAMES = {
    "market": "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
    "founder": "üí° –ò–¥–µ–∏ —Ñ–∞—É–Ω–¥–µ—Ä–∞",
    "business": "üìù –ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å",
    "adapter": "üîÑ –ê–¥–∞–ø—Ç–∞—Ç–æ—Ä –∏–¥–µ–π"
}

# –û–ø–∏—Å–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANT_DESCRIPTIONS = {
    "market": "–ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –Ω–∞–π—Ç–∏ –Ω–∏—à–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è",
    "founder": "–ü–æ–º–æ–≥–∞–µ—Ç –æ–±—Å—É–¥–∏—Ç—å –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏–¥–µ–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –±–∏–∑–Ω–µ—Å–∞",
    "business": "–ü–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å",
    "adapter": "–ü–æ–º–æ–≥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∏–¥–µ–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞"
}

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    keyboard = [
        [KeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", web_app=WebAppInfo(url=MINI_APP_URL))],
        [KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_assistant_selection_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    keyboard = []
    for assistant_type, name in ASSISTANT_NAMES.items():
        keyboard.append([InlineKeyboardButton(name, callback_data=f"select_{assistant_type}")])
    
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start."""
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ –Ω–∞ –±–∞–∑–µ –ò–ò.\n\n"
        "üéÆ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –Ω–∏–∂–µ\n"
        "2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
        "3. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n\n"
        "üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:**\n"
        f"‚Ä¢ {ASSISTANT_NAMES['market']} - {ASSISTANT_DESCRIPTIONS['market']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['founder']} - {ASSISTANT_DESCRIPTIONS['founder']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['business']} - {ASSISTANT_DESCRIPTIONS['business']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['adapter']} - {ASSISTANT_DESCRIPTIONS['adapter']}\n\n"
        "üõë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    )
    
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    help_text = (
        "üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
        "üéÆ **–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n\n"
        "üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:**\n"
        f"‚Ä¢ {ASSISTANT_NAMES['market']} - {ASSISTANT_DESCRIPTIONS['market']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['founder']} - {ASSISTANT_DESCRIPTIONS['founder']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['business']} - {ASSISTANT_DESCRIPTIONS['business']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['adapter']} - {ASSISTANT_DESCRIPTIONS['adapter']}\n\n"
        "‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –£–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω\n\n"
        "üîò **–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
        "üéÆ –í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞\n"
        "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç!"
    )
    
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    user_id = update.effective_user.id
    
    if user_id in active_threads:
        _, _, assistant_type = active_threads[user_id]
        assistant_name = ASSISTANT_NAMES[assistant_type]
        await update.message.reply_text(
            f"ü§ñ **–ê–∫—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:** {assistant_name}\n\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
            "üí¨ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=get_main_keyboard()
        )

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App (—Ç–æ–ª—å–∫–æ –¥–ª—è keyboard button)."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App
        web_app_data = update.message.web_app_data.data
        import json
        data = json.loads(web_app_data)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App: {data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
        selected_assistant = data.get('selected_assistant')
        source = data.get('source', 'keyboard')
        
        if selected_assistant and selected_assistant in ASSISTANTS:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
            await start_chat_with_assistant_direct(update, context, selected_assistant)
        else:
            # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –º–µ–Ω—é
            await send_general_assistant_selection_message(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö Web App: {e}")
        # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –º–µ–Ω—é
        await send_general_assistant_selection_message(update, context)

async def start_chat_with_assistant_direct(update: Update, context: ContextTypes.DEFAULT_TYPE, assistant_type: str) -> None:
    """–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é (–¥–ª—è keyboard button)."""
    user_id = update.effective_user.id
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in active_threads:
        try:
            _, thread_id, _ = active_threads[user_id]
            client.beta.threads.delete(thread_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
    
    assistant_id = ASSISTANTS.get(assistant_type)
    
    if not assistant_id:
        await update.message.reply_text(
            f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç '{ASSISTANT_NAMES[assistant_type]}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    thread = client.beta.threads.create()
    active_threads[user_id] = (assistant_id, thread.id, assistant_type)
    
    await update.message.reply_text(
        f"‚úÖ *–ó–∞–ø—É—â–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}*\n\n"
        f"üìù {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è —Å–º–µ–Ω—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
        "üõë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º '{ASSISTANT_NAMES[assistant_type]}' (ID: {assistant_id}) –≤ –ø–æ—Ç–æ–∫–µ {thread.id}")

async def handle_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ menu button."""
    query = update.inline_query.query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç Mini App
    if query.startswith("assistant_selected_"):
        assistant_type = query.replace("assistant_selected_", "")
        
        if assistant_type in ASSISTANTS:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–∞
            results = [
                InlineQueryResultArticle(
                    id=f"select_{assistant_type}",
                    title=f"–í—ã–±—Ä–∞—Ç—å {ASSISTANT_NAMES[assistant_type]}",
                    description=ASSISTANT_DESCRIPTIONS[assistant_type],
                    input_message_content=InputTextMessageContent(
                        message_text=f"ü§ñ –í—ã–±—Ä–∞–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: *{ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}*\n\n"
                                   f"üìù {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
                                   "üí¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è:",
                        parse_mode='Markdown'
                    ),
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton(
                            f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å {ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}",
                            callback_data=f"select_{assistant_type}"
                        )
                    ]])
                )
            ]
            
            await update.inline_query.answer(results, cache_time=1)
        else:
            # –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await update.inline_query.answer([])
    else:
        # –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        await update.inline_query.answer([])

async def send_specific_assistant_message(update: Update, context: ContextTypes.DEFAULT_TYPE, assistant_type: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    assistant_name = ASSISTANT_NAMES[assistant_type]
    assistant_description = ASSISTANT_DESCRIPTIONS[assistant_type]
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    emoji_map = {
        'market': 'üìä',
        'founder': 'üí°', 
        'business': 'üìù',
        'adapter': 'üîÑ'
    }
    
    message_text = (
        f"{emoji_map[assistant_type]} **{assistant_name.replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}**\n\n"
        f"üìù {assistant_description}\n\n"
        f"üí¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    keyboard = [[InlineKeyboardButton(f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å {assistant_name.replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}", callback_data=f"select_{assistant_type}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def send_general_assistant_selection_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (fallback)."""
    message_text = (
        "ü§ñ **–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è:**\n\n"
        f"üìä **–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞** - {ASSISTANT_DESCRIPTIONS['market']}\n\n"
        f"üí° **–ò–¥–µ–∏ —Ñ–∞—É–Ω–¥–µ—Ä–∞** - {ASSISTANT_DESCRIPTIONS['founder']}\n\n"
        f"üìù **–ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å** - {ASSISTANT_DESCRIPTIONS['business']}\n\n"
        f"üîÑ **–ê–¥–∞–ø—Ç–∞—Ç–æ—Ä –∏–¥–µ–π** - {ASSISTANT_DESCRIPTIONS['adapter']}\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞:"
    )
    
    await update.message.reply_text(
        message_text,
        reply_markup=get_assistant_selection_keyboard(),
        parse_mode='Markdown'
    )

async def start_chat_with_type(update: Update, context: ContextTypes.DEFAULT_TYPE, assistant_type: str) -> None:
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    user_id = update.effective_user.id
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in active_threads:
        try:
            _, thread_id, _ = active_threads[user_id]
            client.beta.threads.delete(thread_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
    
    assistant_id = ASSISTANTS.get(assistant_type)
    
    if not assistant_id:
        await update.callback_query.edit_message_text(
            f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç '{ASSISTANT_NAMES[assistant_type]}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
            reply_markup=get_assistant_selection_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    thread = client.beta.threads.create()
    active_threads[user_id] = (assistant_id, thread.id, assistant_type)
    
    await update.callback_query.edit_message_text(
        f"‚úÖ *–ó–∞–ø—É—â–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}*\n\n"
        f"üìù {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è —Å–º–µ–Ω—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
        "üõë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        parse_mode='Markdown'
    )
    
    logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º '{ASSISTANT_NAMES[assistant_type]}' (ID: {assistant_id}) –≤ –ø–æ—Ç–æ–∫–µ {thread.id}")

async def stop_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
    user_id = update.effective_user.id
    
    if user_id in active_threads:
        _, thread_id, assistant_type = active_threads[user_id]
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        try:
            client.beta.threads.delete(thread_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        del active_threads[user_id]
        
        await update.message.reply_text(
            f"üëã –†–∞–∑–≥–æ–≤–æ—Ä —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º *{ASSISTANT_NAMES[assistant_type].replace('üìä ', '').replace('üí° ', '').replace('üìù ', '').replace('üîÑ ', '')}* –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
            "üéÆ –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\"",
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n\n"
            "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if message_text == "üéÆ –í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞":
        await send_general_assistant_selection_message(update, context)
        return
    elif message_text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ":
        await stop_chat(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in active_threads:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.\n\n"
            "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\" –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ
    assistant_id, thread_id, assistant_type = active_threads[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç"
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message_text
        )
        
        # –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=assistant_id,
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = await poll_run(thread_id, run.id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if response:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for message_chunk in split_response(response):
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
                await update.message.reply_text(
                    message_chunk, 
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ: {e}")
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )

def clean_markdown_formatting(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram."""
    import re
    
    # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = re.sub(r'\*\*(.*?)\*\*', r'*\1*', text)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
    text = re.sub(r'###\s*(.*?)(?=\n|$)', r'*\1*', text)  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è
    text = re.sub(r'##\s*(.*?)(?=\n|$)', r'*\1*', text)   # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    text = re.sub(r'#\s*(.*?)(?=\n|$)', r'*\1*', text)    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'^\s*[\-\*]\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    
    # –£–±–∏—Ä–∞–µ–º —Ç—Ä–æ–π–Ω—ã–µ –∏–ª–∏ –±–æ–ª–µ–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
    text = re.sub(r'\*{3,}', '**', text)
    
    return text

def split_response(response: str) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    response = clean_markdown_formatting(response)
    
    if len(response) <= MAX_MESSAGE_LENGTH:
        return [response]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    chunks = []
    current_chunk = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    paragraphs = response.split('\n\n')
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        if len(paragraph) > MAX_MESSAGE_LENGTH:
            sentences = paragraph.replace('. ', '.|').replace('! ', '!|').replace('? ', '?|').split('|')
            for sentence in sentences:
                if len(current_chunk) + len(sentence) + 2 <= MAX_MESSAGE_LENGTH:
                    if current_chunk:
                        current_chunk += " " + sentence
                    else:
                        current_chunk = sentence
                else:
                    if current_chunk:
                        chunks.append(current_chunk)
                    current_chunk = sentence
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤ —Ç–µ–∫—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
            if len(current_chunk) + len(paragraph) + 2 <= MAX_MESSAGE_LENGTH:
                if current_chunk:
                    current_chunk += "\n\n" + paragraph
                else:
                    current_chunk = paragraph
            else:
                if current_chunk:
                    chunks.append(current_chunk)
                current_chunk = paragraph
    
    if current_chunk:
        chunks.append(current_chunk)
    
    return chunks

async def poll_run(thread_id: str, run_id: str) -> str:
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    max_attempts = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞
    for _ in range(max_attempts):
        await asyncio.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –æ–ø—Ä–æ—Å–∞–º–∏
        
        run = client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run_id
        )
        
        if run.status == "completed":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–æ—Ç–æ–∫–∞
            messages = client.beta.threads.messages.list(
                thread_id=thread_id
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            for message in messages.data:
                if message.role == "assistant":
                    content = ""
                    for content_part in message.content:
                        if content_part.type == "text":
                            content += content_part.text.value
                    
                    return content
            
            return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
        
        if run.status in ["failed", "cancelled", "expired"]:
            logger.error(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {run.status}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
    
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    return "–û—Ç–≤–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ callback_data
    if query.data.startswith("select_"):
        assistant_type = query.data[7:]  # –£–±–∏—Ä–∞–µ–º "select_"
        
        if assistant_type in ASSISTANTS:
            await start_chat_with_type(update, context, assistant_type)

# –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check –Ω–∞ Render.com
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(b'Bot is running!')
    
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
        pass

def run_health_server(port):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check."""
    server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
    logger.info(f"Health check server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
    missing_assistants = [name for name, aid in ASSISTANTS.items() if not aid]
    if missing_assistants:
        logger.error(f"–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤: {missing_assistants}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_ASSISTANT_ID_*")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App (keyboard button)
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è menu button –ø–æ–¥–¥–µ—Ä–∂–∫–∏)
    application.add_handler(InlineQueryHandler(handle_inline_query))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Render.com (–µ—Å—Ç—å –ª–∏ PORT –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
    port = os.environ.get("PORT")
    if port:
        # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render.com
        health_thread = Thread(target=run_health_server, args=(int(port),), daemon=True)
        health_thread.start()
        logger.info(f"Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ, –Ω–æ —Å health check —Å–µ—Ä–≤–µ—Ä–æ–º
        logger.info("–ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ —Å health check —Å–µ—Ä–≤–µ—Ä–æ–º")
        try:
            application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            # Fallback –±–µ–∑ drop_pending_updates
            logger.info("–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ drop_pending_updates")
            application.run_polling()
    else:
        # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("–ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
        try:
            application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            # Fallback –±–µ–∑ drop_pending_updates
            logger.info("–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ drop_pending_updates")
            application.run_polling()

if __name__ == "__main__":
    main()
