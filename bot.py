import os
import logging
import asyncio
import textwrap
from typing import Dict, Any, Tuple
import uuid

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, InlineQueryResultArticle, InputTextMessageContent, InlineQueryResultsButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, InlineQueryHandler
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
MAX_MESSAGE_LENGTH = 4096

# URL Mini App –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
MINI_APP_URL = "https://ai4business-ai.github.io/front-bot-repo/"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: user_id -> (assistant_id, thread_id, assistant_type)
active_threads: Dict[int, Tuple[str, str, str]] = {}

# –¢–∏–ø—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∫–æ–º–∞–Ω–¥—ã
ASSISTANT_TYPES = {
    "market": "market",     # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    "founder": "founder",   # –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∏–¥–µ–π —Ñ–∞—É–Ω–¥–µ—Ä–∞
    "business": "business", # –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏
    "adapter": "adapter"    # –ê–¥–∞–ø—Ç–∞—Ç–æ—Ä –∏–¥–µ–π –∏–∑ –∫–µ–π—Å–æ–≤
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö
ASSISTANTS = {
    "market": os.getenv("OPENAI_ASSISTANT_ID_MARKET"),
    "founder": os.getenv("OPENAI_ASSISTANT_ID_FOUNDER"),
    "business": os.getenv("OPENAI_ASSISTANT_ID_BUSINESS"),
    "adapter": os.getenv("OPENAI_ASSISTANT_ID_ADAPTER")
}

# –ù–∞–∑–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANT_NAMES = {
    "market": "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
    "founder": "üí° –ò–¥–µ–∏ —Ñ–∞—É–Ω–¥–µ—Ä–∞",
    "business": "üìù –ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å",
    "adapter": "üîÑ –ê–¥–∞–ø—Ç–∞—Ç–æ—Ä –∏–¥–µ–π"
}

# –û–ø–∏—Å–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANT_DESCRIPTIONS = {
    "market": "–ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –Ω–∞–π—Ç–∏ –Ω–∏—à–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è",
    "founder": "–ü–æ–º–æ–≥–∞–µ—Ç –æ–±—Å—É–¥–∏—Ç—å –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏–¥–µ–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –±–∏–∑–Ω–µ—Å–∞",
    "business": "–ü–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å",
    "adapter": "–ü–æ–º–æ–≥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∏–¥–µ–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞"
}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANT_INSTRUCTIONS = {
    "market": "–í—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ü–æ–º–æ–≥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –Ω–∏—à–∏, –∏–∑—É—á–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –≤—ã—è–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–¥—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è. –î–∞–≤–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
    
    "founder": "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π –±–∏–∑–Ω–µ—Å–∞. –ü–æ–º–æ–≥–∞–π—Ç–µ —Ñ–∞—É–Ω–¥–µ—Ä–∞–º –æ–±—Å—É–∂–¥–∞—Ç—å, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –∏—Ö –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏. –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –ø–æ–º–æ–≥–∞–π—Ç–µ –≤—ã—è–≤–∏—Ç—å —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–Ω—Ü–µ–ø—Ü–∏–π. –í–∞—à–∞ —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∏–¥–µ–∏ –≤ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–µ–∫—Ç—ã.",
    
    "business": "–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é. –ü–æ–º–æ–≥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏, –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞—Å—Ö–æ–¥–æ–≤, —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –†–∞–±–æ—Ç–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Canvas –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É. –î–∞–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–æ—Å—Ç–∞.",
    
    "adapter": "–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–∞–º. –ü–æ–º–æ–≥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∏–¥–µ–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–æ–≤ –¥–ª—è –∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–µ–π—Å–∞—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ, –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö. –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç—Ä–∞—Å–ª–∏, –º–∞—Å—à—Ç–∞–± –±–∏–∑–Ω–µ—Å–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
for assistant_type, assistant_id in ASSISTANTS.items():
    if not assistant_id:
        try:
            assistant = client.beta.assistants.create(
                name=ASSISTANT_NAMES[assistant_type],
                instructions=ASSISTANT_INSTRUCTIONS[assistant_type],
                model="gpt-4-turbo",
            )
            ASSISTANTS[assistant_type] = assistant.id
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç '{ASSISTANT_NAMES[assistant_type]}' —Å ID: {assistant.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ '{ASSISTANT_NAMES[assistant_type]}': {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            existing_assistants = [aid for aid in ASSISTANTS.values() if aid]
            if existing_assistants:
                ASSISTANTS[assistant_type] = existing_assistants[0]
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è '{ASSISTANT_NAMES[assistant_type]}'")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ '{ASSISTANT_NAMES[assistant_type]}' –∏ –Ω–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    else:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç '{ASSISTANT_NAMES[assistant_type]}' —Å ID: {assistant_id}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start."""
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏.\n\n"
        "üîß **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –ù–∞–ø–∏—à–∏—Ç–µ `@" + context.bot.username + "` –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
        "3. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n\n"
        "üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:**\n"
        f"‚Ä¢ {ASSISTANT_NAMES['market']} - {ASSISTANT_DESCRIPTIONS['market']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['founder']} - {ASSISTANT_DESCRIPTIONS['founder']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['business']} - {ASSISTANT_DESCRIPTIONS['business']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['adapter']} - {ASSISTANT_DESCRIPTIONS['adapter']}\n\n"
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    )
    
    await update.message.reply_text(help_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    help_text = (
        "üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
        "üîß **–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ `@{context.bot.username}` –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n\n"
        "üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:**\n"
        f"‚Ä¢ {ASSISTANT_NAMES['market']} - {ASSISTANT_DESCRIPTIONS['market']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['founder']} - {ASSISTANT_DESCRIPTIONS['founder']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['business']} - {ASSISTANT_DESCRIPTIONS['business']}\n"
        f"‚Ä¢ {ASSISTANT_NAMES['adapter']} - {ASSISTANT_DESCRIPTIONS['adapter']}\n\n"
        "‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/end - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
        "/status - –£–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç!"
    )
    
    await update.message.reply_text(help_text)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    user_id = update.effective_user.id
    
    if user_id in active_threads:
        _, _, assistant_type = active_threads[user_id]
        assistant_name = ASSISTANT_NAMES[assistant_type]
        await update.message.reply_text(
            f"ü§ñ **–ê–∫—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:** {assistant_name}\n\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
            "üí¨ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."
        )
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.\n\n"
            f"–î–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ `@{context.bot.username}` –≤ –ª—é–±–æ–º —á–∞—Ç–µ."
        )

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤."""
    query = update.inline_query.query.lower()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    results = []
    
    for assistant_type, assistant_name in ASSISTANT_NAMES.items():
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if not query or query in assistant_name.lower() or query in ASSISTANT_DESCRIPTIONS[assistant_type].lower():
            result = InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title=assistant_name,
                description=ASSISTANT_DESCRIPTIONS[assistant_type],
                input_message_content=InputTextMessageContent(
                    message_text=f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant_name}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!"
                ),
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ", callback_data=f"start_{assistant_type}")]
                ])
            )
            results.append(result)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    button = InlineQueryResultsButton(
        text="üéÆ –í—ã–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ Mini App",
        web_app=WebAppInfo(url=f"{MINI_APP_URL}?mode=inline")
    )
    
    await update.inline_query.answer(results, button=button, cache_time=1)

async def start_chat_with_type(update: Update, context: ContextTypes.DEFAULT_TYPE, assistant_type: str) -> None:
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    user_id = update.effective_user.id
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in active_threads:
        try:
            _, thread_id, _ = active_threads[user_id]
            client.beta.threads.delete(thread_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
    
    assistant_id = ASSISTANTS.get(assistant_type)
    
    if not assistant_id:
        await update.message.reply_text(
            f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç '{ASSISTANT_NAMES[assistant_type]}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç."
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    thread = client.beta.threads.create()
    active_threads[user_id] = (assistant_id, thread.id, assistant_type)
    
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø—É—â–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: **{ASSISTANT_NAMES[assistant_type]}**\n\n"
        f"üìù {ASSISTANT_DESCRIPTIONS[assistant_type]}\n\n"
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!\n"
        "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"
    )
    
    logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º '{ASSISTANT_NAMES[assistant_type]}' (ID: {assistant_id}) –≤ –ø–æ—Ç–æ–∫–µ {thread.id}")

async def end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
    user_id = update.effective_user.id
    
    if user_id in active_threads:
        _, thread_id, assistant_type = active_threads[user_id]
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        try:
            client.beta.threads.delete(thread_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        del active_threads[user_id]
        
        await update.message.reply_text(
            f"üëã –†–∞–∑–≥–æ–≤–æ—Ä —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º **{ASSISTANT_NAMES[assistant_type]}** –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
            f"–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ `@{context.bot.username}` –≤ –ª—é–±–æ–º —á–∞—Ç–µ."
        )
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n\n"
            f"–î–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ `@{context.bot.username}` –≤ –ª—é–±–æ–º —á–∞—Ç–µ."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if user_id not in active_threads:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.\n\n"
            f"–î–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ `@{context.bot.username}` –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = update.message.text
    assistant_id, thread_id, assistant_type = active_threads[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç"
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_message
        )
        
        # –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=assistant_id,
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = await poll_run(thread_id, run.id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if response:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for message_chunk in split_response(response):
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
                await update.message.reply_text(message_chunk)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ: {e}")
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä."
        )

def split_response(response: str) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    if len(response) <= MAX_MESSAGE_LENGTH:
        return [response]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    chunks = []
    current_chunk = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    paragraphs = response.split('\n\n')
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        if len(paragraph) > MAX_MESSAGE_LENGTH:
            sentences = paragraph.replace('. ', '.|').replace('! ', '!|').replace('? ', '?|').split('|')
            for sentence in sentences:
                if len(current_chunk) + len(sentence) + 2 <= MAX_MESSAGE_LENGTH:
                    if current_chunk:
                        current_chunk += " " + sentence
                    else:
                        current_chunk = sentence
                else:
                    chunks.append(current_chunk)
                    current_chunk = sentence
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤ —Ç–µ–∫—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
            if len(current_chunk) + len(paragraph) + 2 <= MAX_MESSAGE_LENGTH:
                if current_chunk:
                    current_chunk += "\n\n" + paragraph
                else:
                    current_chunk = paragraph
            else:
                chunks.append(current_chunk)
                current_chunk = paragraph
    
    if current_chunk:
        chunks.append(current_chunk)
    
    return chunks

async def poll_run(thread_id: str, run_id: str) -> str:
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    max_attempts = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞
    for _ in range(max_attempts):
        await asyncio.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –æ–ø—Ä–æ—Å–∞–º–∏
        
        run = client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run_id
        )
        
        if run.status == "completed":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–æ—Ç–æ–∫–∞
            messages = client.beta.threads.messages.list(
                thread_id=thread_id
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            for message in messages.data:
                if message.role == "assistant":
                    content = ""
                    for content_part in message.content:
                        if content_part.type == "text":
                            content += content_part.text.value
                    
                    return content
            
            return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
        
        if run.status in ["failed", "cancelled", "expired"]:
            logger.error(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {run.status}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
    
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    return "–û—Ç–≤–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ callback_data
    if query.data.startswith("start_"):
        assistant_type = query.data[6:]  # –£–±–∏—Ä–∞–µ–º "start_"
        
        if assistant_type in ASSISTANT_TYPES:
            await query.edit_message_text(
                text=f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {ASSISTANT_NAMES[assistant_type]}..."
            )
            await start_chat_with_type(update, context, assistant_type)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("end", end_chat))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(InlineQueryHandler(inline_query))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å run_polling —Å drop_pending_updates, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        application.run_polling(drop_pending_updates=True)
    except TypeError:
        # –ï—Å–ª–∏ drop_pending_updates –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π run_polling
        logger.info("–ü–∞—Ä–∞–º–µ—Ç—Ä drop_pending_updates –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ polling")
        application.run_polling()

if __name__ == "__main__":
    main()
