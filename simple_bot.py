import os
import logging
import asyncio
import sqlite3
import json
from typing import Dict, Tuple
from signal import signal, SIGINT, SIGTERM
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler

from dotenv import load_dotenv
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    WebAppInfo,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MINI_APP_URL = "https://ai4business-ai.github.io/front-bot-repo/"
MAX_MESSAGE_LENGTH = 4096
DATABASE_NAME = "users.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
ASSISTANTS = {
    "market": os.getenv("OPENAI_ASSISTANT_ID_MARKET"),
    "founder": os.getenv("OPENAI_ASSISTANT_ID_FOUNDER"),
    "business": os.getenv("OPENAI_ASSISTANT_ID_BUSINESS"),
    "adapter": os.getenv("OPENAI_ASSISTANT_ID_ADAPTER")
}

ASSISTANT_NAMES = {
    "market": "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
    "founder": "üí° –ò–¥–µ–∏ —Ñ–∞—É–Ω–¥–µ—Ä–∞", 
    "business": "üìù –ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å",
    "adapter": "üîÑ –ê–¥–∞–ø—Ç–∞—Ç–æ—Ä –∏–¥–µ–π"
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_threads: Dict[int, Tuple[str, str, str]] = {}
application = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application

class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
        else:
            self.send_response(404)
            self.end_headers()

def run_health_server(port=8080):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
    server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
    logger.info(f"Health check server running on port {port}")
    server.serve_forever()

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    with sqlite3.connect(DATABASE_NAME) as conn:
        conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            status TEXT DEFAULT 'user',
            registered_at TIMESTAMP,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        conn.commit()

def add_or_update_user(telegram_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with sqlite3.connect(DATABASE_NAME) as conn:
        conn.execute('''
        INSERT OR REPLACE INTO users 
        (telegram_id, username, first_name, last_name, last_activity)
        VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (telegram_id, username, first_name, last_name))
        conn.commit()

def get_user_status(telegram_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with sqlite3.connect(DATABASE_NAME) as conn:
        cursor = conn.execute('SELECT status FROM users WHERE telegram_id = ?', (telegram_id,))
        result = cursor.fetchone()
        return result[0] if result else 'new'

def register_user(telegram_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with sqlite3.connect(DATABASE_NAME) as conn:
        conn.execute('''
        UPDATE users 
        SET status = 'registered', registered_at = CURRENT_TIMESTAMP
        WHERE telegram_id = ?
        ''', (telegram_id,))
        conn.commit()

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π Mini App."""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", web_app=WebAppInfo(url=MINI_APP_URL))],
        [KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ")],
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
    ], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    add_or_update_user(user.id, user.username, user.first_name, user.last_name)
    
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç —Å –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ –Ω–∞ –±–∞–∑–µ –ò–ò.\n\n"
        "üéÆ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:"
    )
    
    await update.message.reply_text(text, reply_markup=get_main_keyboard())

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App."""
    try:
        data = json.loads(update.message.web_app_data.data)
        
        if data.get('action') == 'register_user':
            register_user(update.effective_user.id)
            await update.message.reply_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=get_main_keyboard()
            )
        elif data.get('action') == 'select_assistant':
            await start_assistant(
                update, 
                context, 
                data.get('assistant_type')
            )
            
    except Exception as e:
        logger.error(f"WebApp error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_main_keyboard()
        )

async def start_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE, assistant_type: str):
    """–ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    user_id = update.effective_user.id
    
    if user_id in active_threads:
        _, thread_id, _ = active_threads[user_id]
        try:
            client.beta.threads.delete(thread_id)
        except Exception:
            pass
    
    assistant_id = ASSISTANTS.get(assistant_type)
    if not assistant_id:
        await update.message.reply_text(
            "‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            reply_markup=get_main_keyboard()
        )
        return
    
    thread = client.beta.threads.create()
    active_threads[user_id] = (assistant_id, thread.id, assistant_type)
    
    await update.message.reply_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ASSISTANT_NAMES[assistant_type]}\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üéÆ –í—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞":
        await update.message.reply_text(
            "–û—Ç–∫—Ä–æ–π—Ç–µ Mini App –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
            reply_markup=get_main_keyboard()
        )
        return
        
    if text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ":
        if user_id in active_threads:
            del active_threads[user_id]
            await update.message.reply_text(
                "üóëÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
                reply_markup=get_main_keyboard()
            )
        return
    
    if user_id not in active_threads:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
            reply_markup=get_main_keyboard()
        )
        return
    
    await process_assistant_response(update, context)

async def process_assistant_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."""
    user_id = update.effective_user.id
    assistant_id, thread_id, _ = active_threads[user_id]
    
    await context.bot.send_chat_action(user_id, "typing")
    
    try:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ thread
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=update.message.text
        )
        
        # –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=assistant_id
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = await wait_for_assistant_response(thread_id, run.id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response:
            await update.message.reply_text(
                response[:MAX_MESSAGE_LENGTH],
                reply_markup=get_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Assistant error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_main_keyboard()
        )

async def wait_for_assistant_response(thread_id: str, run_id: str) -> str:
    """–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    for _ in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫
        await asyncio.sleep(1)
        
        run = client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run_id
        )
        
        if run.status == "completed":
            messages = client.beta.threads.messages.list(thread_id)
            for msg in messages.data:
                if msg.role == "assistant":
                    return msg.content[0].text.value
        
        if run.status in ["failed", "cancelled"]:
            return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"
    
    return "‚è≥ –û—Ç–≤–µ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å"

def shutdown_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    if application:
        application.stop()
    exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    global application
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_database()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not (token := os.getenv("TELEGRAM_BOT_TOKEN")):
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    port = int(os.getenv("PORT", 8080))
    health_thread = Thread(target=run_health_server, args=(port,), daemon=True)
    health_thread.start()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal(SIGINT, shutdown_handler)
    signal(SIGTERM, shutdown_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
